@{
    ViewData["Title"] = "Xem trước Website";
    Layout = "_AdminLayout";
}

<style>
.preview-container {
    height: calc(100vh - 120px);
    display: flex;
    flex-direction: column;
    background: #f8f9fa;
}

.preview-header {
    background: white;
    padding: 1rem 2rem;
    border-bottom: 1px solid #dee2e6;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.preview-controls {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.preview-controls h3 {
    margin: 0;
    color: #2c3e50;
    font-size: 1.5rem;
    font-weight: 600;
}

.preview-controls h3 i {
    margin-right: 0.5rem;
    color: #667eea;
}

.preview-actions {
    display: flex;
    gap: 0.5rem;
}

.preview-actions .btn {
    font-size: 0.875rem;
    padding: 0.5rem 1rem;
}

.preview-frame-container {
    flex: 1;
    position: relative;
    background: white;
    margin: 1rem;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    overflow: hidden;
    min-height: 600px;
}

.preview-frame-container.loading::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(255,255,255,0.9);
    z-index: 10;
    display: flex;
    align-items: center;
    justify-content: center;
}

.preview-frame-container.loading::after {
    content: 'Đang tải...';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 11;
    background: #667eea;
    color: white;
    padding: 1rem 2rem;
    border-radius: 8px;
    font-weight: 500;
}

#previewFrame {
    width: 100%;
    height: 100%;
    border: none;
    border-radius: 12px;
    background: white;
}

/* Responsive design */
@@media (max-width: 768px) {
    .preview-controls {
        flex-direction: column;
        gap: 1rem;
        align-items: flex-start;
    }
    
    .preview-actions {
        width: 100%;
        justify-content: space-between;
    }
    
    .preview-frame-container {
        margin: 0.5rem;
        min-height: 400px;
    }
}

/* Device frame simulation */
.preview-frame-container::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 40px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    z-index: 5;
    border-radius: 12px 12px 0 0;
}

/* Browser-like frame */
.preview-frame-container {
    border: 2px solid #e9ecef;
}

.preview-frame-container::after {
    content: '';
    position: absolute;
    top: 8px;
    left: 50%;
    transform: translateX(-50%);
    width: 60px;
    height: 4px;
    background: rgba(255,255,255,0.3);
    border-radius: 2px;
    z-index: 6;
}
</style>

<div class="preview-container">
    <div class="preview-header">
        <div class="preview-controls">
            <h3>
                <i class="fas fa-eye"></i>
                Xem trước Website
            </h3>
            <div class="preview-actions">
                <button class="btn btn-primary btn-sm" onclick="refreshPreview()">
                    <i class="fas fa-sync-alt"></i> Làm mới
                </button>
                <a href="@Url.Action("Index", "Home")" target="_blank" class="btn btn-outline-secondary btn-sm">
                    <i class="fas fa-external-link-alt"></i> Mở trong tab mới
                </a>
                <a href="@Url.Action("Index", "Admin")" class="btn btn-outline-primary btn-sm">
                    <i class="fas fa-arrow-left"></i> Quay lại
                </a>
            </div>
        </div>
    </div>
    
    <div class="preview-frame-container loading">
        <iframe id="previewFrame" src="@Url.Action("Index", "Home")" frameborder="0"></iframe>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const previewFrame = document.getElementById('previewFrame');
    const frameContainer = document.querySelector('.preview-frame-container');
    
    // Show loading indicator when iframe is loading
    previewFrame.addEventListener('load', function() {
        frameContainer.classList.remove('loading');
        console.log('Preview loaded successfully');
    });
    
    // Handle iframe load events
    previewFrame.addEventListener('error', function() {
        frameContainer.classList.remove('loading');
        console.error('Preview failed to load');
    });
    
    // Auto-refresh preview every 30 seconds
    setInterval(function() {
        refreshPreview();
    }, 30000);
    
    // Add keyboard shortcuts
    document.addEventListener('keydown', function(e) {
        if (e.ctrlKey && e.key === 'r') {
            e.preventDefault();
            refreshPreview();
        }
    });
});

function refreshPreview() {
    const previewFrame = document.getElementById('previewFrame');
    const frameContainer = document.querySelector('.preview-frame-container');
    
    // Show loading indicator
    frameContainer.classList.add('loading');
    
    // Reload the iframe with a small delay to ensure loading state is visible
    setTimeout(function() {
        previewFrame.src = previewFrame.src;
    }, 100);
}

// Add resize observer to handle iframe responsiveness
if (window.ResizeObserver) {
    const resizeObserver = new ResizeObserver(function(entries) {
        for (let entry of entries) {
            const iframe = entry.target.querySelector('iframe');
            if (iframe) {
                // Adjust iframe height if needed
                iframe.style.height = '100%';
            }
        }
    });
    
    const frameContainer = document.querySelector('.preview-frame-container');
    if (frameContainer) {
        resizeObserver.observe(frameContainer);
    }
}
</script> 