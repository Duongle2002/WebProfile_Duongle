@{
    ViewData["Title"] = "Lê Hữu Dương - Full Stack Developer";
    
    // Lấy dữ liệu từ ViewBag
    var projects = ViewBag.Projects as List<MyWebProfile.Models.Project> ?? new List<MyWebProfile.Models.Project>();
    var skills = ViewBag.Skills as List<MyWebProfile.Models.Skill> ?? new List<MyWebProfile.Models.Skill>();
    var experiences = ViewBag.Experiences as List<MyWebProfile.Models.Experience> ?? new List<MyWebProfile.Models.Experience>();
    var contentSettings = ViewBag.ContentSettings as List<MyWebProfile.Models.ContentSettings> ?? new List<MyWebProfile.Models.ContentSettings>();
    var displayConfig = ViewBag.DisplayConfig as Dictionary<string, object> ?? new Dictionary<string, object>();
    var themeSettings = ViewBag.ThemeSettings as MyWebProfile.Models.ThemeSettings;
    
    // Lấy thông tin từ ContentSettings
    var aboutName = contentSettings.FirstOrDefault(x => x.Key == "AboutName")?.Value ?? "Lê Hữu Dương";
    var aboutTitle = contentSettings.FirstOrDefault(x => x.Key == "AboutTitle")?.Value ?? "Full Stack Developer với hơn 5 năm kinh nghiệm";
    var aboutDescription = contentSettings.FirstOrDefault(x => x.Key == "AboutDescription")?.Value ?? "Tôi là một developer đam mê với kinh nghiệm trong việc phát triển các ứng dụng web hiện đại. Chuyên môn của tôi bao gồm React, .NET, và các công nghệ frontend/backend tiên tiến.";
                    // Tính toán động từ database
                var aboutExperience = experiences.Count > 0 ? experiences.Count.ToString() + "+" : "5+";
                var aboutProjects = projects.Count.ToString();
                var aboutClients = contentSettings.FirstOrDefault(x => x.Key == "SatisfiedClients")?.Value ?? "50+";
    
    var contactEmail = contentSettings.FirstOrDefault(x => x.Key == "ContactEmail")?.Value ?? "duongle@email.com";
    var contactPhone = contentSettings.FirstOrDefault(x => x.Key == "ContactPhone")?.Value ?? "+84 123 456 789";
    var contactAddress = contentSettings.FirstOrDefault(x => x.Key == "ContactAddress")?.Value ?? "Hà Nội, Việt Nam";
    var contactGithub = contentSettings.FirstOrDefault(x => x.Key == "ContactGithub")?.Value ?? "#";
var contactLinkedin = contentSettings.FirstOrDefault(x => x.Key == "ContactLinkedin")?.Value ?? "#";
var contactTwitter = contentSettings.FirstOrDefault(x => x.Key == "ContactTwitter")?.Value ?? "#";
var contactFacebook = contentSettings.FirstOrDefault(x => x.Key == "ContactFacebook")?.Value ?? "#";
var contactInstagram = contentSettings.FirstOrDefault(x => x.Key == "ContactInstagram")?.Value ?? "#";
var contactYoutube = contentSettings.FirstOrDefault(x => x.Key == "ContactYoutube")?.Value ?? "#";
    
    // Display settings - lấy từ ContentSettings
    var aboutActive = contentSettings.FirstOrDefault(x => x.Key == "AboutActive")?.Value == "True" || true;
    var experienceActive = contentSettings.FirstOrDefault(x => x.Key == "ExperienceActive")?.Value == "True" || true;
    var projectsActive = contentSettings.FirstOrDefault(x => x.Key == "ProjectsActive")?.Value == "True" || true;
    var contactActive = contentSettings.FirstOrDefault(x => x.Key == "ContactActive")?.Value == "True" || true;
    
    // Get sections from ViewBag
    var sections = ViewBag.Sections as List<object> ?? new List<object>();
    
    // Lấy thứ tự từ ContentSettings
    var aboutOrder = int.Parse(contentSettings.FirstOrDefault(x => x.Key == "AboutOrder")?.Value ?? "1");
    var experienceOrder = int.Parse(contentSettings.FirstOrDefault(x => x.Key == "ExperienceOrder")?.Value ?? "2");
    var projectsOrder = int.Parse(contentSettings.FirstOrDefault(x => x.Key == "ProjectsOrder")?.Value ?? "3");
    var contactOrder = int.Parse(contentSettings.FirstOrDefault(x => x.Key == "ContactOrder")?.Value ?? "4");
    
    var floatingNavActive = displayConfig.ContainsKey("FloatingNavActive") ? (bool)displayConfig["FloatingNavActive"] : true;
    var backToTopActive = displayConfig.ContainsKey("BackToTopActive") ? (bool)displayConfig["BackToTopActive"] : true;
    var pageLoaderActive = displayConfig.ContainsKey("PageLoaderActive") ? (bool)displayConfig["PageLoaderActive"] : true;
    var scrollAnimationActive = displayConfig.ContainsKey("ScrollAnimationActive") ? (bool)displayConfig["ScrollAnimationActive"] : true;
}

<!-- Hero Section -->
<partial name="_Hero" />

<!-- Navigation Menu -->
@if (floatingNavActive)
{
    <nav class="floating-nav" id="floatingNav">
        <div class="nav-container">
            <div class="nav-links">
                <a href="#hero" class="nav-link active" data-section="hero">
                    <i class="fas fa-home"></i>
                    <span>Trang chủ</span>
                </a>
                @{
                    var navCounter = 0;
                }
                @{
                    var activeSections = new List<dynamic>();
                }
                
                @if (aboutActive)
                {
                    activeSections.Add(new { Type = "About", Order = aboutOrder, Name = "Giới thiệu", Icon = "fas fa-user" });
                }
                @if (experienceActive)
                {
                    activeSections.Add(new { Type = "Experience", Order = experienceOrder, Name = "Kinh nghiệm", Icon = "fas fa-briefcase" });
                }
                @if (projectsActive)
                {
                    activeSections.Add(new { Type = "Projects", Order = projectsOrder, Name = "Dự án", Icon = "fas fa-project-diagram" });
                }
                @if (contactActive)
                {
                    activeSections.Add(new { Type = "Contact", Order = contactOrder, Name = "Liên hệ", Icon = "fas fa-envelope" });
                }
                
                @{
                    activeSections = activeSections.OrderBy(s => s.Order).ToList();
                }
                
                @foreach (var navSection in activeSections)
                {
                    navCounter++;
                    <a href="#section-@navCounter" class="nav-link" data-section="@navSection.Type.ToLower()" data-section-index="@navCounter">
                        <i class="@navSection.Icon"></i>
                        <span>@navSection.Name</span>
                    </a>
                }
            </div>
        </div>
    </nav>
}

<!-- Main Content Sections -->
<main class="main-content">
    @{
        var sectionCounter = 0;
    }
    @{
        var activeContentSections = new List<dynamic>();
    }
    
    @if (aboutActive)
    {
        activeContentSections.Add(new { Type = "About", Order = aboutOrder });
    }
    @if (experienceActive)
    {
        activeContentSections.Add(new { Type = "Experience", Order = experienceOrder });
    }
    @if (projectsActive)
    {
        activeContentSections.Add(new { Type = "Projects", Order = projectsOrder });
    }
    @if (contactActive)
    {
        activeContentSections.Add(new { Type = "Contact", Order = contactOrder });
    }
    
    @{
        activeContentSections = activeContentSections.OrderBy(s => s.Order).ToList();
    }
    
    @foreach (var contentSection in activeContentSections)
    {
        sectionCounter++;
        switch (contentSection.Type)
            {
                case "About":
                    <section id="section-@sectionCounter" class="section about-section">
                        <div class="container">
                            <div class="section-header" data-aos="fade-up" data-aos-duration="800" data-aos-delay="100">
                                <h2 class="section-title">Về Tôi</h2>
                                <p class="section-subtitle">Tìm hiểu thêm về tôi và những gì tôi làm</p>
                            </div>
                            <div class="about-content">
                                <div class="row">
                                    <div class="col-md-6" data-aos="fade-right" data-aos-duration="800" data-aos-delay="200">
                                        <div class="about-text">
                                            <h3>@aboutName</h3>
                                            <p class="lead">@aboutTitle</p>
                                            <p>@aboutDescription</p>
                                            <div class="skills-section">
                                                <h4 class="skills-title">Kỹ năng chuyên môn</h4>
                                                <div class="skills-grid">
                                                    @foreach (var skill in skills.Take(6))
                                                    {
                                                        var skillIndex = skills.Take(6).ToList().IndexOf(skill);
                                                        var icons = new[] { "bi-code-slash", "bi-braces", "bi-database", "bi-gear", "bi-palette", "bi-server" };
                                                        var iconClass = skillIndex < icons.Length ? icons[skillIndex] : "bi-code-slash";
                                                        
                                                        <div class="skill-card" data-aos="zoom-in" data-aos-duration="600" data-aos-delay="@(400 + skillIndex * 100)">
                                                            <div class="skill-icon">
                                                                <i class="@(string.IsNullOrEmpty(skill.Icon) ? "bi bi-code-slash" : skill.Icon)"></i>
                                                            </div>
                                                            <div class="skill-content">
                                                                <h5 class="skill-name">@skill.Name</h5>
                                                                <div class="skill-progress-overlay">
                                                                    <div class="skill-progress">
                                                                        <div class="skill-progress-bar" style="width: @(skill.Proficiency)%"></div>
                                                                    </div>
                                                                    <span class="skill-percentage">@(skill.Proficiency)%</span>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    }
                                                </div>
                                                @if (skills.Count > 6)
                                                {
                                                    <div class="skills-more">
                                                        <button class="btn btn-outline-primary btn-sm" onclick="showAllSkills()">
                                                            <i class="fas fa-plus"></i> Xem thêm @(skills.Count - 6) kỹ năng
                                                        </button>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6" data-aos="fade-left" data-aos-duration="800" data-aos-delay="300">
                                        <div class="about-stats">
                                            <div class="stat-card" data-aos="zoom-in" data-aos-duration="600" data-aos-delay="400">
                                                <div class="stat-number">@aboutExperience</div>
                                                <div class="stat-label">Năm kinh nghiệm</div>
                                            </div>
                                            <div class="stat-card" data-aos="zoom-in" data-aos-duration="600" data-aos-delay="500">
                                                <div class="stat-number">@aboutProjects</div>
                                                <div class="stat-label">Dự án hoàn thành</div>
                                            </div>
                                            <div class="stat-card" data-aos="zoom-in" data-aos-duration="600" data-aos-delay="600">
                                                <div class="stat-number">@aboutClients</div>
                                                <div class="stat-label">Khách hàng hài lòng</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </section>
                    break;

                case "Experience":
                    <section id="section-@sectionCounter" class="section experience-section">
                        <div class="container">
                            <div class="section-header" data-aos="fade-up" data-aos-duration="800" data-aos-delay="100">
                                <h2 class="section-title">Kinh Nghiệm</h2>
                                <p class="section-subtitle">Hành trình phát triển sự nghiệp của tôi</p>
                            </div>
                            <div class="experience-timeline">
                                @foreach (var experience in experiences)
                                {
                                    <div class="timeline-item" data-aos="fade-up" data-aos-duration="800" data-aos-delay="@(200 + (experiences.IndexOf(experience) * 100))">
                                        <div class="timeline-dot"></div>
                                        <div class="timeline-content">
                                            <h3>@experience.Title</h3>
                                            <p class="timeline-company">@experience.Company - @experience.StartDate.ToString("yyyy") - @(experience.EndDate?.ToString("yyyy") ?? "Hiện tại")</p>
                                            <p>@experience.Description</p>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </section>
                    break;

                case "Projects":
                    <section id="section-@sectionCounter" class="section projects-section">
                        <div class="container">
                            <div class="section-header" data-aos="fade-up" data-aos-duration="800" data-aos-delay="100">
                                <h2 class="section-title">Dự Án</h2>
                                <p class="section-subtitle">Những dự án tôi đã thực hiện</p>
                            </div>
                            <div class="projects-grid">
                                @foreach (var project in projects.Take(6))
                                {
                                    var projectIndex = projects.Take(6).ToList().IndexOf(project);
                                    <div class="project-card" data-aos="fade-up" data-aos-duration="800" data-aos-delay="@(200 + projectIndex * 100)">
                                        <div class="project-image">
                                            <img src="@(string.IsNullOrEmpty(project.ImageUrl) ? "/images/default-project.svg" : project.ImageUrl)" alt="@project.Title" onerror="this.src='/images/default-project.svg'">
                                        </div>
                                        <div class="project-content">
                                            <h3 class="project-title">@project.Title</h3>
                                            <p class="project-description">@project.Description</p>
                                            <div class="project-tags">
                                                @if (!string.IsNullOrEmpty(project.Tags))
                                                {
                                                    var tags = project.Tags.Split(',');
                                                    foreach (var tag in tags)
                                                    {
                                                        <span class="badge bg-primary me-1">@tag.Trim()</span>
                                                    }
                                                }
                                            </div>
                                            <div class="project-meta">
                                                <span class="price">$@project.Price.ToString("N0")</span>
                                                <div class="rating">
                                                    <i class="fas fa-star"></i>
                                                    <span>@project.Rating.ToString("F1")</span>
                                                </div>
                                            </div>
                                            <div class="project-actions">
                                                @if (!string.IsNullOrEmpty(project.GitHubUrl))
                                                {
                                                    <a href="@project.GitHubUrl" target="_blank" class="btn btn-sm btn-outline-primary">
                                                        <i class="fab fa-github"></i> GitHub
                                                    </a>
                                                }
                                                @if (!string.IsNullOrEmpty(project.DeployUrl))
                                                {
                                                    <a href="@project.DeployUrl" target="_blank" class="btn btn-sm btn-success">
                                                        <i class="fas fa-external-link-alt"></i> Live Demo
                                                    </a>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                            @if (projects.Count > 6)
                            {
                                <div class="projects-more text-center mt-4">
                                    <button class="btn btn-outline-primary btn-lg" onclick="showAllProjects()">
                                        <i class="fas fa-plus"></i> Xem thêm @(projects.Count - 6) dự án
                                    </button>
                                </div>
                            }
                        </div>
                    </section>
                    break;

                case "Contact":
                    <section id="section-@sectionCounter" class="section contact-section">
                        <div class="container">
                            <div class="section-header" data-aos="fade-up" data-aos-duration="800" data-aos-delay="100">
                                <h2 class="section-title">Liên Hệ</h2>
                                <p class="section-subtitle">Hãy liên hệ với tôi để bắt đầu dự án của bạn</p>
                            </div>
                            <div class="contact-content">
                                <div class="row">
                                    <div class="col-md-6" data-aos="fade-right" data-aos-duration="800" data-aos-delay="200">
                                        <div class="contact-info">
                                            <h3>Thông tin liên hệ</h3>
                                            <div class="contact-item">
                                                <i class="fas fa-envelope"></i>
                                                <span>@contactEmail</span>
                                            </div>
                                            <div class="contact-item">
                                                <i class="fas fa-phone"></i>
                                                <span>@contactPhone</span>
                                            </div>
                                            <div class="contact-item">
                                                <i class="fas fa-map-marker-alt"></i>
                                                <span>@contactAddress</span>
                                            </div>
                                            @if (!string.IsNullOrEmpty(contactGithub) && contactGithub != "#")
                                            {
                                                <div class="social-links">
                                                    @if (!string.IsNullOrEmpty(contactGithub) && contactGithub != "#")
                                                    {
                                                        <a href="@contactGithub" class="social-link" target="_blank" title="GitHub">
                                                            <i class="bi bi-github"></i>
                                                        </a>
                                                    }
                                                    @if (!string.IsNullOrEmpty(contactLinkedin) && contactLinkedin != "#")
                                                    {
                                                        <a href="@contactLinkedin" class="social-link" target="_blank" title="LinkedIn">
                                                            <i class="bi bi-linkedin"></i>
                                                        </a>
                                                    }
                                                    @if (!string.IsNullOrEmpty(contactTwitter) && contactTwitter != "#")
                                                    {
                                                        <a href="@contactTwitter" class="social-link" target="_blank" title="Twitter">
                                                            <i class="bi bi-twitter-x"></i>
                                                        </a>
                                                    }
                                                    @if (!string.IsNullOrEmpty(contactFacebook) && contactFacebook != "#")
                                                    {
                                                        <a href="@contactFacebook" class="social-link" target="_blank" title="Facebook">
                                                            <i class="bi bi-facebook"></i>
                                                        </a>
                                                    }
                                                    @if (!string.IsNullOrEmpty(contactInstagram) && contactInstagram != "#")
                                                    {
                                                        <a href="@contactInstagram" class="social-link" target="_blank" title="Instagram">
                                                            <i class="bi bi-instagram"></i>
                                                        </a>
                                                    }
                                                    @if (!string.IsNullOrEmpty(contactYoutube) && contactYoutube != "#")
                                                    {
                                                        <a href="@contactYoutube" class="social-link" target="_blank" title="YouTube">
                                                            <i class="bi bi-youtube"></i>
                                                        </a>
                                                    }
                                                </div>
                                            }
                                        </div>
                                    </div>
                                    <div class="col-md-6" data-aos="fade-left" data-aos-duration="800" data-aos-delay="300">
                                        <div class="contact-form">
                                            <form id="contactForm">
                                                <div class="form-group">
                                                    <input type="text" id="contactName" name="Name" placeholder="Họ và tên" required>
                                                    <span class="error-message" id="nameError"></span>
                                                </div>
                                                <div class="form-group">
                                                    <input type="email" id="contactEmail" name="Email" placeholder="Email" required>
                                                    <span class="error-message" id="emailError"></span>
                                                </div>
                                                <div class="form-group">
                                                    <input type="tel" id="contactPhone" name="Phone" placeholder="Số điện thoại (không bắt buộc)">
                                                    <span class="error-message" id="phoneError"></span>
                                                </div>
                                                <div class="form-group">
                                                    <input type="text" id="contactSubject" name="Subject" placeholder="Chủ đề (không bắt buộc)">
                                                    <span class="error-message" id="subjectError"></span>
                                                </div>
                                                <div class="form-group">
                                                    <textarea id="contactMessage" name="Message" placeholder="Nội dung tin nhắn" rows="5" required></textarea>
                                                    <span class="error-message" id="messageError"></span>
                                                </div>
                                                <button type="submit" class="btn btn-primary" id="submitBtn">
                                                    <span class="btn-text">Gửi tin nhắn</span>
                                                    <span class="btn-loading" style="display: none;">
                                                        <i class="fas fa-spinner fa-spin"></i> Đang gửi...
                                                    </span>
                                                </button>
                                            </form>
                                            <div id="contactResult" class="mt-3" style="display: none;"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </section>
                    break;
            }
        }
</main>

<!-- Footer Section -->
<footer class="footer-section" data-aos="fade-up" data-aos-duration="800" data-aos-delay="100">
    <div class="container">
        <div class="footer-content">
            <div class="row">
                <div class="col-md-4">
                    <div class="footer-info">
                        <h3><i class="bi bi-person-circle"></i> @aboutName</h3>
                        <p class="footer-description">@aboutTitle</p>
                        <p class="footer-location">
                            <i class="bi bi-geo-alt-fill"></i>
                            @contactAddress
                        </p>
                        <div class="footer-contact">
                            <p><i class="bi bi-envelope-fill"></i> @contactEmail</p>
                            <p><i class="bi bi-telephone-fill"></i> @contactPhone</p>
                        </div>
                    </div>
                </div>
                
                <div class="col-md-4">
                    <div class="footer-links">
                        <h4><i class="bi bi-link-45deg"></i> Liên kết nhanh</h4>
                        <ul class="footer-nav">
                            <li><a href="#hero"><i class="bi bi-house-fill"></i> Trang chủ</a></li>
                            @if (aboutActive)
                            {
                                <li><a href="#section-1"><i class="bi bi-person-fill"></i> Giới thiệu</a></li>
                            }
                            @if (experienceActive)
                            {
                                <li><a href="#section-2"><i class="bi bi-briefcase-fill"></i> Kinh nghiệm</a></li>
                            }
                            @if (projectsActive)
                            {
                                <li><a href="#section-3"><i class="bi bi-code-slash"></i> Dự án</a></li>
                            }
                            @if (contactActive)
                            {
                                <li><a href="#section-4"><i class="bi bi-envelope-fill"></i> Liên hệ</a></li>
                            }
                        </ul>
                    </div>
                </div>
                
                <div class="col-md-4">
                    <div class="footer-social">
                        <h4><i class="bi bi-people-fill"></i> Theo dõi tôi</h4>
                        <div class="social-links">
                            @if (!string.IsNullOrEmpty(contactGithub) && contactGithub != "#")
                            {
                                <a href="@contactGithub" class="social-link" target="_blank" title="GitHub">
                                    <i class="bi bi-github"></i>
                                    <span class="social-text">GitHub</span>
                                </a>
                            }
                            @if (!string.IsNullOrEmpty(contactLinkedin) && contactLinkedin != "#")
                            {
                                <a href="@contactLinkedin" class="social-link" target="_blank" title="LinkedIn">
                                    <i class="bi bi-linkedin"></i>
                                    <span class="social-text">LinkedIn</span>
                                </a>
                            }
                            @if (!string.IsNullOrEmpty(contactTwitter) && contactTwitter != "#")
                            {
                                <a href="@contactTwitter" class="social-link" target="_blank" title="Twitter">
                                    <i class="bi bi-twitter-x"></i>
                                    <span class="social-text">Twitter</span>
                                </a>
                            }
                            @if (!string.IsNullOrEmpty(contactFacebook) && contactFacebook != "#")
                            {
                                <a href="@contactFacebook" class="social-link" target="_blank" title="Facebook">
                                    <i class="bi bi-facebook"></i>
                                    <span class="social-text">Facebook</span>
                                </a>
                            }
                            @if (!string.IsNullOrEmpty(contactInstagram) && contactInstagram != "#")
                            {
                                <a href="@contactInstagram" class="social-link" target="_blank" title="Instagram">
                                    <i class="bi bi-instagram"></i>
                                    <span class="social-text">Instagram</span>
                                </a>
                            }
                            @if (!string.IsNullOrEmpty(contactYoutube) && contactYoutube != "#")
                            {
                                <a href="@contactYoutube" class="social-link" target="_blank" title="YouTube">
                                    <i class="bi bi-youtube"></i>
                                    <span class="social-text">YouTube</span>
                                </a>
                            }
                        </div>
                        
                        <div class="footer-stats">
                            <div class="stat-item">
                                <span class="stat-number">@aboutProjects</span>
                                <span class="stat-label">Dự án</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-number">@aboutExperience</span>
                                <span class="stat-label">Kinh nghiệm</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-number">@aboutClients</span>
                                <span class="stat-label">Khách hàng</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="footer-bottom">
            <div class="row">
                <div class="col-md-6">
                    <p class="copyright">
                        © @DateTime.Now.Year @aboutName. Tất cả quyền được bảo lưu.
                    </p>
                </div>
                <div class="col-md-6">
                    <p class="footer-credit">
                        Được phát triển với <i class="fas fa-heart"></i> và <i class="fas fa-coffee"></i>
                    </p>
                </div>
            </div>
        </div>
    </div>
</footer>

<!-- Back to Top Button -->
@if (backToTopActive)
{
    <button class="back-to-top" id="backToTop">
        <i class="fas fa-arrow-up"></i>
    </button>
}

<!-- Loading Animation -->
@if (pageLoaderActive)
{
    <div class="page-loader" id="pageLoader">
        <div class="loader-content">
            <div class="loader-spinner"></div>
            <p>Đang tải...</p>
        </div>
    </div>
}

<style>
/* Global Styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

html {
    scroll-behavior: smooth;
    overflow-x: hidden;
}

body {
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    line-height: 1.6;
    color: #333;
    overflow-x: hidden;
    /* Tối ưu scroll performance */
    -webkit-overflow-scrolling: touch;
    scroll-behavior: smooth;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
}

/* Section Styles */
.section {
    padding: 6rem 0;
    position: relative;
    scroll-margin-top: 80px; /* Reduced scroll margin for better centering */
}

/* Specific scroll margins for different sections */
.about-section {
    scroll-margin-top: 40px; /* Even less margin for About to scroll down more */
}

.experience-section {
    scroll-margin-top: 60px; /* Less margin for Experience to scroll down more */
}

.contact-section {
    scroll-margin-top: 40px; /* Even less margin for Contact to scroll down more */
}

.projects-section {
    scroll-margin-top: 80px; /* Keep Projects margin as is */
}

.section-header {
    text-align: center;
    margin-bottom: 4rem;
}

.section-title {
    font-size: 3rem;
    font-weight: 700;
    margin-bottom: 1rem;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
}

.section-subtitle {
    font-size: 1.2rem;
    color: #666;
    max-width: 600px;
    margin: 0 auto;
}

/* About Section */
.about-content {
    margin-top: 3rem;
}

.about-text h3 {
    font-size: 2rem;
    margin-bottom: 1rem;
    color: #333;
}

.about-text .lead {
    font-size: 1.2rem;
    color: #666;
    margin-bottom: 1.5rem;
}

.skills-section {
    margin-top: 2.5rem;
}

.skills-title {
    font-size: 1.3rem;
    font-weight: 600;
    color: #333;
    margin-bottom: 1.5rem;
    position: relative;
    padding-left: 1rem;
}

.skills-title::before {
    content: '';
    position: absolute;
    left: 0;
    top: 50%;
    transform: translateY(-50%);
    width: 4px;
    height: 20px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 2px;
}

.skills-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
}

.skill-card {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 1rem;
    background: rgba(102, 126, 234, 0.1);
    border-radius: 10px;
    transition: all 0.3s ease;
    position: relative;
    overflow: visible;
    cursor: pointer;
}

.skill-card:hover {
    background: rgba(102, 126, 234, 0.2);
    transform: translateY(-2px);
}

.skill-icon {
    width: 40px;
    height: 40px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    overflow: hidden;
}

.skill-icon::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
    transition: left 0.5s ease;
}

.skill-card:hover .skill-icon::before {
    left: 100%;
}

.skill-icon i {
    color: white;
    font-size: 1.1rem;
    z-index: 1;
    position: relative;
}

.skill-content {
    flex: 1;
}

.skill-name {
    font-size: 1rem;
    font-weight: 600;
    color: #333;
    margin: 0;
    line-height: 1.3;
}

.skill-progress-overlay {
    position: absolute;
    bottom: 100%;
    left: 0;
    right: 0;
    background: white;
    border-radius: 8px;
    padding: 0.75rem;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    transform: translateY(10px) scale(0.95);
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
    z-index: 100;
    margin-bottom: 0.5rem;
    min-width: 200px;
    pointer-events: none;
}

.skill-card:hover .skill-progress-overlay {
    transform: translateY(0) scale(1);
    opacity: 1;
    visibility: visible;
    pointer-events: auto;
}

.skill-level {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.skill-progress {
    flex: 1;
    height: 8px;
    background: #f0f0f0;
    border-radius: 4px;
    overflow: hidden;
    position: relative;
}

.skill-progress-bar {
    height: 100%;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 4px;
    transition: width 1.5s ease;
    position: relative;
    overflow: hidden;
}

.skill-progress-bar::after {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
    animation: shimmer 2s infinite;
}

@@keyframes shimmer {
    0% { left: -100%; }
    100% { left: 100%; }
}

.skill-percentage {
    font-size: 0.9rem;
    font-weight: 600;
    color: #667eea;
    min-width: 35px;
    text-align: right;
}

.skills-more {
    text-align: center;
    margin-top: 1rem;
}

.skills-more .btn {
    border-radius: 25px;
    padding: 0.5rem 1.5rem;
    font-weight: 500;
    transition: all 0.3s ease;
    border: 2px solid #667eea;
    color: #667eea;
    background: transparent;
}

.skills-more .btn:hover {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(102, 126, 234, 0.3);
}

/* Skills Modal Styles */
.skills-modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(10px);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 10000;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
}

.skills-modal-overlay.show {
    opacity: 1;
    visibility: visible;
}

.skills-modal {
    background: white;
    border-radius: 20px;
    max-width: 90vw;
    max-height: 90vh;
    width: 800px;
    overflow: hidden;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
    transform: scale(0.8) translateY(50px);
    transition: all 0.3s ease;
}

.skills-modal-overlay.show .skills-modal {
    transform: scale(1) translateY(0);
}

.skills-modal-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 1.5rem 2rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.skills-modal-header h3 {
    margin: 0;
    font-size: 1.5rem;
    font-weight: 600;
}

.modal-close {
    background: none;
    border: none;
    color: white;
    font-size: 1.5rem;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 50%;
    transition: all 0.3s ease;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.modal-close:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: rotate(90deg);
}

.skills-modal-body {
    padding: 2rem;
    max-height: 70vh;
    overflow-y: auto;
}

.skills-modal-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
}

.skill-modal-card {
    background: white;
    border-radius: 15px;
    padding: 1.5rem;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
    border: 1px solid rgba(102, 126, 234, 0.1);
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
}

.skill-modal-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    transform: scaleX(0);
    transition: transform 0.3s ease;
}

.skill-modal-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 25px rgba(102, 126, 234, 0.15);
    border-color: rgba(102, 126, 234, 0.3);
}

.skill-modal-card:hover::before {
    transform: scaleX(1);
}

.skill-modal-icon {
    width: 50px;
    height: 50px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 1rem;
    position: relative;
    overflow: hidden;
}

.skill-modal-icon::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
    transition: left 0.5s ease;
}

.skill-modal-card:hover .skill-modal-icon::before {
    left: 100%;
}

.skill-modal-icon i {
    color: white;
    font-size: 1.3rem;
    z-index: 1;
    position: relative;
}

.skill-modal-content {
    flex: 1;
}

.skill-modal-name {
    font-size: 1.1rem;
    font-weight: 600;
    color: #333;
    margin-bottom: 0.75rem;
    line-height: 1.3;
}

.skill-modal-progress-overlay {
    position: absolute;
    bottom: 100%;
    left: 0;
    right: 0;
    background: white;
    border-radius: 8px;
    padding: 0.75rem;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    transform: translateY(10px) scale(0.95);
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
    z-index: 100;
    margin-bottom: 0.5rem;
    min-width: 200px;
    pointer-events: none;
}

.skill-modal-card:hover .skill-modal-progress-overlay {
    transform: translateY(0) scale(1);
    opacity: 1;
    visibility: visible;
    pointer-events: auto;
}

.skill-modal-level {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.skill-modal-progress {
    flex: 1;
    height: 8px;
    background: #f0f0f0;
    border-radius: 4px;
    overflow: hidden;
    position: relative;
}

.skill-modal-progress-bar {
    height: 100%;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 4px;
    transition: width 1.5s ease;
    position: relative;
    overflow: hidden;
}

.skill-modal-progress-bar::after {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
    animation: shimmer 2s infinite;
}

.skill-modal-percentage {
    font-size: 0.9rem;
    font-weight: 600;
    color: #667eea;
    min-width: 35px;
    text-align: right;
}

/* Responsive Modal */
@@media (max-width: 768px) {
    .skills-modal {
        width: 95vw;
        max-height: 95vh;
        margin: 1rem;
    }
    
    .skills-modal-header {
        padding: 1rem 1.5rem;
    }
    
    .skills-modal-header h3 {
        font-size: 1.3rem;
    }
    
    .skills-modal-body {
        padding: 1.5rem;
    }
    
    .skills-modal-grid {
        grid-template-columns: 1fr;
        gap: 1rem;
    }
    
    .skill-modal-card {
        padding: 1rem;
    }
}

/* Projects Modal Styles */
.projects-modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(10px);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 10000;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
}

.projects-modal-overlay.show {
    opacity: 1;
    visibility: visible;
}

.projects-modal {
    background: white;
    border-radius: 20px;
    max-width: 95vw;
    max-height: 95vh;
    width: 1200px;
    overflow: hidden;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
    transform: scale(0.8) translateY(50px);
    transition: all 0.3s ease;
}

.projects-modal-overlay.show .projects-modal {
    transform: scale(1) translateY(0);
}

.projects-modal-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 1.5rem 2rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.projects-modal-header h3 {
    margin: 0;
    font-size: 1.5rem;
    font-weight: 600;
}

.projects-modal-body {
    padding: 2rem;
    max-height: 80vh;
    overflow-y: auto;
}

.projects-modal-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 2rem;
}

.project-modal-card {
    background: white;
    border-radius: 15px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
    border: 1px solid rgba(102, 126, 234, 0.1);
    transition: all 0.3s ease;
    overflow: hidden;
}

.project-modal-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    transform: scaleX(0);
    transition: transform 0.3s ease;
}

.project-modal-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 25px rgba(102, 126, 234, 0.15);
    border-color: rgba(102, 126, 234, 0.3);
}

.project-modal-card:hover::before {
    transform: scaleX(1);
}

.project-modal-image {
    height: 200px;
    overflow: hidden;
    background: #f8f9fa;
    display: flex;
    align-items: center;
    justify-content: center;
}

.project-modal-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
}

.project-modal-card:hover .project-modal-image img {
    transform: scale(1.05);
}

.project-modal-content {
    padding: 1.5rem;
}

.project-modal-title {
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 0.75rem;
    color: #2c3e50;
}

.project-modal-description {
    color: #6c757d;
    font-size: 0.9rem;
    line-height: 1.5;
    margin-bottom: 1rem;
}

.project-modal-tags {
    margin-bottom: 1rem;
}

.project-modal-tags .badge {
    font-size: 0.75rem;
    padding: 0.25rem 0.5rem;
}

.project-modal-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
    padding: 0.75rem 0;
    border-top: 1px solid #e9ecef;
    border-bottom: 1px solid #e9ecef;
}

.project-modal-actions {
    display: flex;
    gap: 0.5rem;
}

.project-modal-actions .btn {
    font-size: 0.8rem;
    padding: 0.375rem 0.75rem;
}

/* Responsive Projects Modal */
@@media (max-width: 768px) {
    .projects-modal {
        width: 95vw;
        max-height: 95vh;
        margin: 1rem;
    }
    
    .projects-modal-header {
        padding: 1rem 1.5rem;
    }
    
    .projects-modal-header h3 {
        font-size: 1.3rem;
    }
    
    .projects-modal-body {
        padding: 1.5rem;
    }
    
    .projects-modal-grid {
        grid-template-columns: 1fr;
        gap: 1rem;
    }
    
    .project-modal-card {
        margin-bottom: 1rem;
    }
}

.about-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1.5rem;
}

.stat-card {
    text-align: center;
    padding: 2rem;
    background: white;
    border-radius: 15px;
    box-shadow: 0 5px 20px rgba(0,0,0,0.1);
    transition: transform 0.3s ease;
}

.stat-card:hover {
    transform: translateY(-5px);
}

.stat-number {
    font-size: 2.5rem;
    font-weight: 700;
    color: #667eea;
    margin-bottom: 0.5rem;
}

.stat-label {
    color: #666;
    font-size: 0.9rem;
}

/* Experience Section */
.experience-timeline {
    position: relative;
    max-width: 800px;
    margin: 0 auto;
}

.experience-timeline::before {
    content: '';
    position: absolute;
    left: 50%;
    top: 0;
    bottom: 0;
    width: 2px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    transform: translateX(-50%);
}

.timeline-item {
    position: relative;
    margin-bottom: 3rem;
    width: 45%;
}

.timeline-item:nth-child(odd) {
    left: 0;
}

.timeline-item:nth-child(even) {
    left: 55%;
}

.timeline-dot {
    position: absolute;
    width: 20px;
    height: 20px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 50%;
    top: 0;
}

.timeline-item:nth-child(odd) .timeline-dot {
    right: -60px;
}

.timeline-item:nth-child(even) .timeline-dot {
    left: -60px;
}

.timeline-content {
    background: white;
    padding: 2rem;
    border-radius: 15px;
    box-shadow: 0 5px 20px rgba(0,0,0,0.1);
}

.timeline-content h3 {
    color: #333;
    margin-bottom: 0.5rem;
}

.timeline-company {
    color: #667eea;
    font-weight: 600;
    margin-bottom: 1rem;
}

/* Projects Section */
.projects-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 2rem;
    margin-top: 3rem;
}

.project-card {
    background: white;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
    border: 1px solid #e0e0e0;
}

.project-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 15px rgba(0, 0, 0, 0.15);
}

.project-image {
    height: 200px;
    overflow: hidden;
    background: #f8f9fa;
    display: flex;
    align-items: center;
    justify-content: center;
}

.project-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.project-content {
    padding: 1.5rem;
}

.project-title {
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 0.75rem;
    color: #2c3e50;
}

.project-description {
    color: #6c757d;
    font-size: 0.9rem;
    line-height: 1.5;
    margin-bottom: 1rem;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
}

.project-tags {
    margin-bottom: 1rem;
}

.project-tags .badge {
    font-size: 0.75rem;
    padding: 0.25rem 0.5rem;
}

.project-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
    padding: 0.75rem 0;
    border-top: 1px solid #e9ecef;
    border-bottom: 1px solid #e9ecef;
}

.price {
    font-weight: 600;
    color: #28a745;
    font-size: 1.1rem;
}

.rating {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    color: #ffc107;
}

.rating i {
    font-size: 0.9rem;
}

.project-actions {
    display: flex;
    gap: 0.5rem;
}

.project-actions .btn {
    font-size: 0.8rem;
    padding: 0.375rem 0.75rem;
}

/* Contact Section */
.contact-content {
    margin-top: 3rem;
}

.contact-info h3 {
    color: white;
    margin-bottom: 2rem;
}

.contact-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1.5rem;
    color: rgba(255, 255, 255, 0.9);
}

.contact-item i {
    width: 20px;
    color: rgba(255, 255, 255, 0.7);
}

.social-links {
    display: flex;
    gap: 1rem;
    margin-top: 2rem;
}

.social-link {
    width: 45px;
    height: 45px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    text-decoration: none;
    transition: all 0.3s ease;
}

.social-link:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: translateY(-3px);
    color: white;
}

.social-link i {
    font-size: 1.2rem;
}

.contact-form {
    background: rgba(255, 255, 255, 0.1);
    padding: 2rem;
    border-radius: 15px;
    backdrop-filter: blur(10px);
}

.form-group {
    margin-bottom: 1.5rem;
}

.form-group input,
.form-group textarea {
    width: 100%;
    padding: 1rem;
    border: 2px solid transparent;
    border-radius: 10px;
    background: rgba(255, 255, 255, 0.9);
    color: #333;
    font-size: 1rem;
    transition: all 0.3s ease;
}

.form-group input:focus,
.form-group textarea:focus {
    outline: none;
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

.form-group input.error,
.form-group textarea.error {
    border-color: #dc3545;
    box-shadow: 0 0 0 3px rgba(220, 53, 69, 0.1);
}

.error-message {
    color: #dc3545;
    font-size: 0.875rem;
    margin-top: 0.25rem;
    display: block;
}

#contactResult {
    border-radius: 10px;
    padding: 1rem;
    margin-top: 1rem;
}

#contactResult.alert-success {
    background-color: rgba(40, 167, 69, 0.1);
    border: 1px solid rgba(40, 167, 69, 0.3);
    color: #155724;
}

#contactResult.alert-danger {
    background-color: rgba(220, 53, 69, 0.1);
    border: 1px solid rgba(220, 53, 69, 0.3);
    color: #721c24;
}

.form-group input::placeholder,
.form-group textarea::placeholder {
    color: #666;
}

.btn-primary {
    background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
    border: none;
    color: white;
    padding: 1rem 2rem;
    border-radius: 50px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
}

.btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(255, 107, 107, 0.3);
}

/* Floating Navigation */
.floating-nav {
    position: fixed;
    top: 50%;
    right: 2rem;
    transform: translateY(-50%);
    z-index: 1000;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(20px);
    border-radius: 50px;
    padding: 1rem;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    border: 1px solid rgba(255, 255, 255, 0.2);
}

.nav-container {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.nav-link {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.25rem;
    padding: 0.75rem;
    border-radius: 25px;
    color: #666;
    text-decoration: none;
    transition: all 0.3s ease;
    font-size: 0.8rem;
    min-width: 60px;
    position: relative;
    overflow: hidden;
}

.nav-link::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 25px;
    opacity: 0;
    transition: opacity 0.3s ease;
    z-index: -1;
}

.nav-link:hover::before,
.nav-link.active::before {
    opacity: 1;
}

.nav-link:hover {
    color: white;
    transform: translateX(-5px);
}

.nav-link.active {
    color: white;
    transform: translateX(-5px);
}

.nav-link i {
    font-size: 1.2rem;
    transition: transform 0.3s ease;
}

.nav-link:hover i,
.nav-link.active i {
    transform: scale(1.1);
}

.nav-link span {
    font-weight: 500;
    transition: transform 0.3s ease;
}

.nav-link:hover span,
.nav-link.active span {
    transform: scale(1.05);
}

/* Back to Top Button */
.back-to-top {
    position: fixed;
    bottom: 2rem;
    right: 2rem;
    width: 50px;
    height: 50px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border: none;
    border-radius: 50%;
    color: white;
    font-size: 1.2rem;
    cursor: pointer;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
    z-index: 1000;
    box-shadow: 0 5px 15px rgba(102, 126, 234, 0.3);
}

.back-to-top.show {
    opacity: 1;
    visibility: visible;
}

.back-to-top:hover {
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
}

/* Page Loader */
.page-loader {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 9999;
    transition: opacity 0.5s ease, visibility 0.5s ease;
}

.page-loader.hidden {
    opacity: 0;
    visibility: hidden;
}

.loader-content {
    text-align: center;
    color: white;
}

.loader-spinner {
    width: 50px;
    height: 50px;
    border: 3px solid rgba(255, 255, 255, 0.3);
    border-top: 3px solid white;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto 1rem;
}

@@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Section Backgrounds */
.about-section {
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
}

.experience-section {
    background: white;
}

.projects-section {
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
}

.contact-section {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
}

.contact-section .section-title {
    background: linear-gradient(45deg, #fff, #f0f0f0);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
}

.contact-section .section-subtitle {
    color: rgba(255, 255, 255, 0.8);
}

/* Responsive Design */
@@media (max-width: 768px) {
    html {
        scroll-behavior: auto;
    }
    
    body {
        -webkit-overflow-scrolling: touch;
    }
    
    .section {
        scroll-margin-top: 60px; /* Smaller scroll margin on mobile */
    }
    
    .floating-nav {
        position: fixed;
        bottom: 2rem;
        right: 2rem;
        top: auto;
        transform: none;
        border-radius: 25px;
        padding: 0.75rem;
    }
    
    .nav-container {
        flex-direction: row;
        gap: 0.25rem;
    }
    
    .nav-link {
        flex-direction: column;
        padding: 0.5rem;
        min-width: 50px;
    }
    
    .nav-link span {
        display: none;
    }
    
    .nav-link:hover,
    .nav-link.active {
        transform: translateY(-3px);
    }
    
    .section {
        padding: 4rem 0;
    }
    
    .section-title {
        font-size: 2.5rem;
    }
    
    .container {
        padding: 0 1rem;
    }
    
    .timeline-item {
        width: 100%;
        left: 0 !important;
    }
    
    .experience-timeline::before {
        left: 20px;
    }
    
    .timeline-dot {
        left: -40px !important;
        right: auto !important;
    }
    
    /* Skills responsive */
    .skills-grid {
        grid-template-columns: repeat(2, 1fr);
        gap: 0.75rem;
    }
    
    .skill-card {
        padding: 0.75rem;
    }
    
    .skill-icon {
        width: 35px;
        height: 35px;
    }
    
    .skill-icon i {
        font-size: 1rem;
    }
    
    .skill-name {
        font-size: 0.9rem;
    }
    
    .skills-title {
        font-size: 1.2rem;
        margin-bottom: 1rem;
    }
    
    .skill-progress-overlay {
        padding: 0.5rem;
        font-size: 0.8rem;
    }
    
    .skill-modal-progress-overlay {
        padding: 0.75rem;
    }
}

@@media (max-width: 480px) {
    .floating-nav {
        right: 1rem;
        bottom: 1rem;
    }
    
    .section-title {
        font-size: 2rem;
    }
    
    .back-to-top {
        right: 1rem;
        bottom: 1rem;
    }
}

/* AOS Performance Optimization */
[data-aos] {
    pointer-events: none;
    will-change: transform, opacity;
}

[data-aos].aos-animate {
    pointer-events: auto;
}

/* Ensure AOS animations work properly */
[data-aos] {
    opacity: 0;
    transition: opacity 0.8s ease, transform 0.8s ease;
}

[data-aos].aos-animate {
    opacity: 1;
}

/* Disable AOS on mobile for better performance */
@@media (max-width: 768px) {
    [data-aos] {
        opacity: 1 !important;
        transform: none !important;
        transition: none !important;
    }
}

/* Ensure footer doesn't interfere with scroll */
.footer-section {
    pointer-events: auto !important;
    transform: none !important;
    transition: none !important;
    display: block !important;
    visibility: visible !important;
    opacity: 1 !important;
    position: relative !important;
    z-index: 100 !important;
}

.footer-section[data-aos] {
    opacity: 1 !important;
    transform: none !important;
    display: block !important;
    visibility: visible !important;
}



/* Footer Styles */
.footer-section {
    background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
    color: white;
    padding: 4rem 0 2rem;
    position: relative;
    overflow: hidden;
    z-index: 10;
    /* Ensure footer doesn't interfere with scroll */
    pointer-events: auto;
    transform: none !important;
}

.footer-section::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="50" cy="50" r="1" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
    opacity: 0.1;
}

.footer-content {
    position: relative;
    z-index: 2;
}

.footer-info h3 {
    font-size: 1.8rem;
    font-weight: 700;
    margin-bottom: 1rem;
    background: linear-gradient(45deg, #fff, #f0f0f0);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.footer-info h3 i {
    font-size: 1.5rem;
    color: rgba(255, 255, 255, 0.9);
    -webkit-text-fill-color: rgba(255, 255, 255, 0.9);
}

.footer-description {
    color: rgba(255, 255, 255, 0.8);
    margin-bottom: 1.5rem;
    line-height: 1.6;
}

.footer-location {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: rgba(255, 255, 255, 0.9);
    margin-bottom: 1rem;
}

.footer-contact p {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: rgba(255, 255, 255, 0.8);
    margin-bottom: 0.5rem;
}

.footer-links h4,
.footer-social h4 {
    font-size: 1.2rem;
    font-weight: 600;
    margin-bottom: 1.5rem;
    color: white;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.footer-links h4 i,
.footer-social h4 i {
    font-size: 1.3rem;
    color: rgba(255, 255, 255, 0.9);
}

.footer-nav {
    list-style: none;
    padding: 0;
    margin: 0;
}

.footer-nav li {
    margin-bottom: 0.8rem;
}

.footer-nav a {
    color: rgba(255, 255, 255, 0.8);
    text-decoration: none;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.footer-nav a:hover {
    color: white;
    transform: translateX(5px);
}

.footer-nav a i {
    font-size: 1rem;
    min-width: 16px;
    opacity: 0.8;
    transition: opacity 0.3s ease;
}

.footer-nav a:hover i {
    opacity: 1;
}

.footer-social .social-links {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    gap: 1rem;
    margin-bottom: 2rem;
}

.footer-social .social-link {
    padding: 1rem;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    color: rgba(255, 255, 255, 0.8);
    text-decoration: none;
    transition: all 0.3s ease;
    background: none !important;
    border: none !important;
    border-radius: 0 !important;
    box-shadow: none !important;
}

.footer-social .social-link:hover {
    color: white;
    transform: translateY(-3px);
    background: none !important;
    border: none !important;
    box-shadow: none !important;
}

.footer-social .social-link i {
    font-size: 1.3rem;
    min-width: 24px;
    display: inline-block;
}

.footer-social .social-text {
    font-size: 0.9rem;
    font-weight: 500;
}

.footer-stats {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;
}

.footer-stats .stat-item {
    text-align: center;
    padding: 1rem;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 10px;
    backdrop-filter: blur(10px);
}

.footer-stats .stat-number {
    display: block;
    font-size: 1.5rem;
    font-weight: 700;
    color: white;
    margin-bottom: 0.25rem;
}

.footer-stats .stat-label {
    font-size: 0.8rem;
    color: rgba(255, 255, 255, 0.8);
}

.footer-bottom {
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
}

.copyright,
.footer-credit {
    color: rgba(255, 255, 255, 0.7);
    font-size: 0.9rem;
    margin: 0;
}

.footer-credit i {
    color: #e74c3c;
    margin: 0 0.25rem;
}

/* Responsive Footer */
@@media (max-width: 768px) {
    .footer-section {
        padding: 3rem 0 1.5rem;
    }
    
    .footer-info,
    .footer-links,
    .footer-social {
        text-align: center;
        margin-bottom: 2rem;
    }
    
    .footer-social .social-links {
        grid-template-columns: repeat(2, 1fr);
        gap: 0.75rem;
    }
    
    .footer-social .social-link {
        padding: 0.75rem;
        font-size: 0.8rem;
    }
    
    .footer-social .social-text {
        font-size: 0.8rem;
    }
    
    .footer-stats {
        grid-template-columns: 1fr;
        gap: 0.5rem;
    }
    
    .footer-bottom {
        text-align: center;
    }
    
    .copyright,
    .footer-credit {
        margin-bottom: 0.5rem;
    }
}

@@media (max-width: 480px) {
    .footer-social .social-links {
        grid-template-columns: repeat(2, 1fr);
    }
}

/* Custom scrollbar */
::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #f1f1f1;
}

::-webkit-scrollbar-thumb {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
    background: linear-gradient(135deg, #5a6fd8 0%, #6a4190 100%);
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Page Loader
    const pageLoader = document.getElementById('pageLoader');
    if (pageLoader) {
        setTimeout(() => {
            pageLoader.classList.add('hidden');
        }, 1000);
    }

    // Back to Top Button
    const backToTop = document.getElementById('backToTop');
    if (backToTop) {
        window.addEventListener('scroll', () => {
            if (window.pageYOffset > 300) {
                backToTop.classList.add('show');
            } else {
                backToTop.classList.remove('show');
            }
        });

        backToTop.addEventListener('click', () => {
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        });
    }

    // Floating Navigation
    const navLinks = document.querySelectorAll('.nav-link');
    const sections = document.querySelectorAll('.section');
    const heroSection = document.querySelector('#hero') || document.querySelector('.hero-section');

    // Smooth scrolling for navigation links with improved accuracy
    navLinks.forEach(link => {
        link.addEventListener('click', (e) => {
            e.preventDefault();
            const targetId = link.getAttribute('href').substring(1);
            const targetSection = document.getElementById(targetId);
            
            if (targetSection) {
                // Calculate center position for better visibility
                const finalPosition = calculateCenterPosition(targetSection);
                
                // Scroll to center position
                window.scrollTo({
                    top: finalPosition,
                    behavior: 'smooth'
                });
                
                // Update active state after a short delay to ensure scroll completes
                setTimeout(() => {
                    navLinks.forEach(navLink => navLink.classList.remove('active'));
                    link.classList.add('active');
                    // Force update active state after scroll
                    setTimeout(updateActiveNavLink, 500);
                }, 100);
            }
        });
    });

    // Improved active navigation link based on scroll position
    function updateActiveNavLink() {
        const scrollPosition = window.pageYOffset + 100; // Reduced offset for better accuracy
        let current = '';

        // Check hero section first
        if (heroSection) {
            const heroTop = heroSection.offsetTop;
            const heroHeight = heroSection.offsetHeight;
            if (scrollPosition >= heroTop && scrollPosition < heroTop + heroHeight) {
                current = 'hero';
            }
        }

        // Check other sections with precise detection
        sections.forEach(section => {
            const sectionTop = section.offsetTop;
            const sectionHeight = section.offsetHeight;
            
            // Check if scroll position is within this section
            if (scrollPosition >= sectionTop && scrollPosition < sectionTop + sectionHeight) {
                // Get section type from class name
                const sectionClasses = section.className;
                if (sectionClasses.includes('about-section')) {
                    current = 'about';
                } else if (sectionClasses.includes('experience-section')) {
                    current = 'experience';
                } else if (sectionClasses.includes('projects-section')) {
                    current = 'projects';
                } else if (sectionClasses.includes('contact-section')) {
                    current = 'contact';
                }
            }
        });

        // Update active state
        navLinks.forEach(link => {
            link.classList.remove('active');
            const linkSection = link.getAttribute('data-section');
            if (linkSection === current) {
                link.classList.add('active');
            }
        });
    }

    // Function to calculate center position for sections
    function calculateCenterPosition(targetSection) {
        // Don't apply special positioning to footer
        if (targetSection.classList.contains('footer-section')) {
            return targetSection.offsetTop - 100; // Simple scroll to footer
        }
        
        const windowHeight = window.innerHeight;
        const sectionHeight = targetSection.offsetHeight;
        const sectionTop = targetSection.offsetTop;
        
        // Calculate offset for floating navigation
        const floatingNav = document.querySelector('.floating-nav');
        const navHeight = floatingNav ? floatingNav.offsetHeight + 20 : 0;
        
        // Get section type to apply different positioning
        const sectionClasses = targetSection.className;
        let additionalOffset = 0;
        
        if (sectionClasses.includes('about-section')) {
            additionalOffset = 300; // Scroll down more for About section
        } else if (sectionClasses.includes('experience-section')) {
            additionalOffset = 20; // Scroll down more for Experience section
        } else if (sectionClasses.includes('contact-section')) {
            additionalOffset = 220; // Scroll down more for Contact section
        } else if (sectionClasses.includes('projects-section')) {
            additionalOffset = -300; // Keep Projects section as is
        }
        
        // Calculate position to center the section in viewport with additional offset
        const centerPosition = sectionTop - (windowHeight / 2) + (sectionHeight / 2) - navHeight + additionalOffset;
        
        // Ensure we don't scroll past the top
        return Math.max(0, centerPosition);
    }

    // Throttled scroll event for better performance
    let scrollTimeout;
    let isScrolling = false;
    
    window.addEventListener('scroll', () => {
        isScrolling = true;
        if (scrollTimeout) {
            clearTimeout(scrollTimeout);
        }
        scrollTimeout = setTimeout(() => {
            updateActiveNavLink();
            isScrolling = false;
        }, 50);
    });
    
    // Update active state when scroll ends
    window.addEventListener('scrollend', () => {
        if (!isScrolling) {
            updateActiveNavLink();
        }
    });

    // Handle window resize to recalculate offsets
    window.addEventListener('resize', () => {
        // Recalculate scroll margins when window resizes
        const sections = document.querySelectorAll('.section');
        const offset = calculateScrollOffset();
        sections.forEach(section => {
            section.style.scrollMarginTop = offset + 'px';
        });
    });

    // Debug function for AOS and sections
    function debugAOS() {
        console.log('=== AOS Debug Info ===');
        console.log('AOS initialized:', typeof AOS !== 'undefined');
        console.log('Scroll animation active:', @scrollAnimationActive.ToString().ToLower());
        console.log('Active sections from admin settings:');
        console.log('- About Active:', @aboutActive.ToString().ToLower());
        console.log('- Experience Active:', @experienceActive.ToString().ToLower());
        console.log('- Projects Active:', @projectsActive.ToString().ToLower());
        console.log('- Contact Active:', @contactActive.ToString().ToLower());
        console.log('Section orders:');
        console.log('- About Order:', @aboutOrder);
        console.log('- Experience Order:', @experienceOrder);
        console.log('- Projects Order:', @projectsOrder);
        console.log('- Contact Order:', @contactOrder);
    }
    
    // Function to force refresh AOS
    function refreshAOS() {
        if (typeof AOS !== 'undefined') {
            AOS.refresh();
            console.log('AOS refreshed');
        }
    }
    
    // Force refresh AOS when navigation is clicked
    navLinks.forEach(link => {
        link.addEventListener('click', () => {
            setTimeout(refreshAOS, 500); // Refresh after scroll completes
        });
    });

    // Initial active state
    updateActiveNavLink();
    
    // Debug AOS on load
    debugAOS();

    // Add smooth scrolling to all internal links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const targetId = this.getAttribute('href').substring(1);
            const targetSection = document.getElementById(targetId);
            
            if (targetSection) {
                // Use the same center positioning logic
                const finalPosition = calculateCenterPosition(targetSection);
                
                window.scrollTo({
                    top: finalPosition,
                    behavior: 'smooth'
                });
            }
        });
    });

    // Add scroll to top functionality for hero section
    const heroLink = document.querySelector('a[href="#hero"]');
    if (heroLink) {
        heroLink.addEventListener('click', (e) => {
            e.preventDefault();
            // Scroll to top with smooth behavior
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
            
            // Update active state
            navLinks.forEach(navLink => navLink.classList.remove('active'));
            heroLink.classList.add('active');
        });
    }

    // Skills Modal Function
    function showAllSkills() {
        const skills = @Html.Raw(Json.Serialize(skills));
        let modalContent = `
            <div class="skills-modal-overlay" id="skillsModal">
                <div class="skills-modal">
                    <div class="skills-modal-header">
                        <h3>Kỹ năng chuyên môn</h3>
                        <button class="modal-close" onclick="closeSkillsModal()">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div class="skills-modal-body">
                        <div class="skills-modal-grid">
        `;
        
        skills.forEach((skill, index) => {
            const iconClass = skill.icon || 'bi-code-slash';
            
            modalContent += `
                <div class="skill-modal-card" data-aos="zoom-in" data-aos-duration="600" data-aos-delay="${index * 100}">
                    <div class="skill-modal-icon">
                        <i class="${iconClass}"></i>
                    </div>
                    <div class="skill-modal-content">
                        <h5 class="skill-modal-name">${skill.name}</h5>
                        <div class="skill-modal-progress-overlay">
                            <div class="skill-modal-level">
                                <div class="skill-modal-progress">
                                    <div class="skill-modal-progress-bar" style="width: ${skill.proficiency}%"></div>
                                </div>
                                <span class="skill-modal-percentage">${skill.proficiency}%</span>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        });
        
        modalContent += `
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        document.body.insertAdjacentHTML('beforeend', modalContent);
        
        // Animate modal appearance
        setTimeout(() => {
            document.getElementById('skillsModal').classList.add('show');
        }, 10);
    }
    
    function closeSkillsModal() {
        const modal = document.getElementById('skillsModal');
        if (modal) {
            modal.classList.remove('show');
            setTimeout(() => {
                modal.remove();
            }, 300);
        }
    }
    
    // Close modal when clicking outside
    document.addEventListener('click', function(e) {
        const modal = document.getElementById('skillsModal');
        if (modal && e.target === modal) {
            closeSkillsModal();
        }
        
        const projectsModal = document.getElementById('projectsModal');
        if (projectsModal && e.target === projectsModal) {
            closeProjectsModal();
        }
    });

    // Projects Modal Function
    function showAllProjects() {
        const projects = @Html.Raw(Json.Serialize(projects));
        let modalContent = `
            <div class="projects-modal-overlay" id="projectsModal">
                <div class="projects-modal">
                    <div class="projects-modal-header">
                        <h3>Tất cả dự án</h3>
                        <button class="modal-close" onclick="closeProjectsModal()">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div class="projects-modal-body">
                        <div class="projects-modal-grid">
        `;
        
        projects.forEach((project, index) => {
            const imageUrl = project.imageUrl || '/images/default-project.svg';
            const tags = project.tags ? project.tags.split(',').map(tag => tag.trim()) : [];
            
            modalContent += `
                <div class="project-modal-card" data-aos="fade-up" data-aos-duration="600" data-aos-delay="${index * 100}">
                    <div class="project-modal-image">
                        <img src="${imageUrl}" alt="${project.title}" onerror="this.src='/images/default-project.svg'">
                    </div>
                    <div class="project-modal-content">
                        <h4 class="project-modal-title">${project.title}</h4>
                        <p class="project-modal-description">${project.description}</p>
                        <div class="project-modal-tags">
                            ${tags.map(tag => `<span class="badge bg-primary me-1">${tag}</span>`).join('')}
                        </div>
                        <div class="project-modal-meta">
                            <span class="price">$${parseFloat(project.price).toLocaleString()}</span>
                            <div class="rating">
                                <i class="fas fa-star"></i>
                                <span>${parseFloat(project.rating).toFixed(1)}</span>
                            </div>
                        </div>
                        <div class="project-modal-actions">
                            ${project.githubUrl ? `<a href="${project.githubUrl}" target="_blank" class="btn btn-sm btn-outline-primary"><i class="fab fa-github"></i> GitHub</a>` : ''}
                            ${project.deployUrl ? `<a href="${project.deployUrl}" target="_blank" class="btn btn-sm btn-success"><i class="fas fa-external-link-alt"></i> Live Demo</a>` : ''}
                        </div>
                    </div>
                </div>
            `;
        });
        
        modalContent += `
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        document.body.insertAdjacentHTML('beforeend', modalContent);
        
        // Animate modal appearance
        setTimeout(() => {
            document.getElementById('projectsModal').classList.add('show');
        }, 10);
    }
    
    function closeProjectsModal() {
        const modal = document.getElementById('projectsModal');
        if (modal) {
            modal.classList.remove('show');
            setTimeout(() => {
                modal.remove();
            }, 300);
        }
    }

    // Contact Form Handler
    document.addEventListener('DOMContentLoaded', function() {
        const contactForm = document.getElementById('contactForm');
        const submitBtn = document.getElementById('submitBtn');
        const btnText = submitBtn.querySelector('.btn-text');
        const btnLoading = submitBtn.querySelector('.btn-loading');
        const resultDiv = document.getElementById('contactResult');

        if (contactForm) {
            contactForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                // Clear previous errors
                clearErrors();
                
                // Show loading state
                btnText.style.display = 'none';
                btnLoading.style.display = 'inline-block';
                submitBtn.disabled = true;
                
                // Get form data
                const formData = {
                    Name: document.getElementById('contactName').value.trim(),
                    Email: document.getElementById('contactEmail').value.trim(),
                    Phone: document.getElementById('contactPhone').value.trim(),
                    Subject: document.getElementById('contactSubject').value.trim(),
                    Message: document.getElementById('contactMessage').value.trim()
                };
                
                try {
                    const response = await fetch('/Home/SendContactMessage', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(formData)
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        showResult('success', result.message);
                        contactForm.reset();
                    } else {
                        showResult('error', result.message);
                        if (result.errors) {
                            showErrors(result.errors);
                        }
                    }
                } catch (error) {
                    showResult('error', 'Có lỗi xảy ra khi gửi tin nhắn. Vui lòng thử lại sau.');
                } finally {
                    // Reset button state
                    btnText.style.display = 'inline-block';
                    btnLoading.style.display = 'none';
                    submitBtn.disabled = false;
                }
            });
        }
        
        function clearErrors() {
            const errorElements = document.querySelectorAll('.error-message');
            errorElements.forEach(el => el.textContent = '');
            resultDiv.style.display = 'none';
        }
        
        function showErrors(errors) {
            if (errors.includes('Họ và tên là bắt buộc')) {
                document.getElementById('nameError').textContent = 'Họ và tên là bắt buộc';
            }
            if (errors.includes('Email là bắt buộc') || errors.includes('Email không hợp lệ')) {
                document.getElementById('emailError').textContent = 'Email không hợp lệ';
            }
            if (errors.includes('Nội dung tin nhắn là bắt buộc')) {
                document.getElementById('messageError').textContent = 'Nội dung tin nhắn là bắt buộc';
            }
        }
        
        function showResult(type, message) {
            resultDiv.className = `alert alert-${type === 'success' ? 'success' : 'danger'} mt-3`;
            resultDiv.textContent = message;
            resultDiv.style.display = 'block';
            
            // Auto hide after 5 seconds
            setTimeout(() => {
                resultDiv.style.display = 'none';
            }, 5000);
        }
    });

    // AOS Configuration
    @if (scrollAnimationActive)
    {
        <text>
        // Initialize AOS with custom settings
        AOS.init({
            duration: 800,
            easing: 'ease-out-cubic',
            once: false, // Allow re-animation when scrolling down
            mirror: false, // Disable mirror to prevent re-animation on scroll up
            offset: 100,
            delay: 0
        });
        
        // Refresh AOS on window resize
        window.addEventListener('resize', () => {
            AOS.refresh();
        });
        
        // Refresh AOS when scrolling down to trigger animations
        let lastScrollTop = 0;
        window.addEventListener('scroll', () => {
            const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
            
            // Only refresh when scrolling down
            if (scrollTop > lastScrollTop) {
                AOS.refresh();
            }
            
            lastScrollTop = scrollTop;
        });
        </text>
    }
    else
    {
        <text>
        // Disable AOS if scroll animation is disabled
        AOS.init({
            disable: true
        });
        </text>
    }



    // Apply theme settings from database
    @if (themeSettings != null)
    {
        <text>
        const themeSettings = @Html.Raw(Json.Serialize(themeSettings));
        window.themeSettings = themeSettings; // Make available globally
        const root = document.documentElement;
        
        // Apply color settings
        root.style.setProperty('--primary-color', themeSettings.primaryColor || '#007bff');
        root.style.setProperty('--secondary-color', themeSettings.secondaryColor || '#6c757d');
        root.style.setProperty('--background-color', themeSettings.backgroundColor || '#ffffff');
        root.style.setProperty('--text-color', themeSettings.textColor || '#333333');
        
        // Apply button gradient settings
        root.style.setProperty('--primary-button-gradient-start', themeSettings.primaryButtonGradientStart || '#007bff');
        root.style.setProperty('--primary-button-gradient-end', themeSettings.primaryButtonGradientEnd || '#0056b3');
        root.style.setProperty('--secondary-button-gradient-start', themeSettings.secondaryButtonGradientStart || '#6c757d');
        root.style.setProperty('--secondary-button-gradient-end', themeSettings.secondaryButtonGradientEnd || '#545b62');
        root.style.setProperty('--outline-button-border-color', themeSettings.outlineButtonBorderColor || '#007bff');
        root.style.setProperty('--outline-button-text-color', themeSettings.outlineButtonTextColor || '#007bff');
        
        // Apply typography settings
        root.style.setProperty('--font-family', themeSettings.fontFamily || "'Inter', sans-serif");
        root.style.setProperty('--font-size', (themeSettings.fontSize || 16) + 'px');
        root.style.setProperty('--line-height', themeSettings.lineHeight || '1.6');
        root.style.setProperty('--letter-spacing', themeSettings.letterSpacing || '0.5px');
        
        // Apply visual settings
        root.style.setProperty('--border-radius', themeSettings.borderRadius || '8px');
        root.style.setProperty('--box-shadow', themeSettings.boxShadow || '0 2px 4px rgba(0,0,0,0.1)');
        
        // Apply animation settings
        root.style.setProperty('--transition-duration', themeSettings.transitionDuration || '0.3s');
        root.style.setProperty('--transition-timing', themeSettings.transitionTimingFunction || 'ease');
        
        // Apply page section colors
        root.style.setProperty('--header-background-color', themeSettings.headerBackgroundColor || '#ffffff');
        root.style.setProperty('--header-text-color', themeSettings.headerTextColor || '#333333');
        root.style.setProperty('--hero-background-color', themeSettings.heroBackgroundColor || '#f8f9fa');
        root.style.setProperty('--hero-text-color', themeSettings.heroTextColor || '#333333');
        root.style.setProperty('--about-background-color', themeSettings.aboutBackgroundColor || '#ffffff');
        root.style.setProperty('--about-text-color', themeSettings.aboutTextColor || '#333333');
        root.style.setProperty('--experience-background-color', themeSettings.experienceBackgroundColor || '#f8f9fa');
        root.style.setProperty('--experience-text-color', themeSettings.experienceTextColor || '#333333');
        root.style.setProperty('--projects-background-color', themeSettings.projectsBackgroundColor || '#ffffff');
        root.style.setProperty('--projects-text-color', themeSettings.projectsTextColor || '#333333');
        root.style.setProperty('--contact-background-color', themeSettings.contactBackgroundColor || '#f8f9fa');
        root.style.setProperty('--contact-text-color', themeSettings.contactTextColor || '#333333');
        root.style.setProperty('--footer-background-color', themeSettings.footerBackgroundColor || '#343a40');
        root.style.setProperty('--footer-text-color', themeSettings.footerTextColor || '#ffffff');
        
        // Apply hover effect settings
        root.style.setProperty('--link-hover-color', themeSettings.linkHoverColor || '#0056b3');
        root.style.setProperty('--button-hover-transform', themeSettings.buttonHoverTransform || 'translateY(-2px)');
        root.style.setProperty('--button-hover-shadow', themeSettings.buttonHoverShadow || '0 4px 8px rgba(0,0,0,0.2)');
        root.style.setProperty('--card-hover-transform', themeSettings.cardHoverTransform || 'translateY(-4px)');
        root.style.setProperty('--card-hover-shadow', themeSettings.cardHoverShadow || '0 8px 16px rgba(0,0,0,0.15)');
        root.style.setProperty('--image-hover-transform', themeSettings.imageHoverTransform || 'scale(1.05)');
        root.style.setProperty('--image-hover-shadow', themeSettings.imageHoverShadow || '0 6px 12px rgba(0,0,0,0.2)');
        
        // Apply page loader settings
        root.style.setProperty('--loader-color', themeSettings.loaderColor || '#007bff');
        root.style.setProperty('--loader-background-color', themeSettings.loaderBackgroundColor || '#ffffff');
        root.style.setProperty('--loader-size', themeSettings.loaderSize || '40px');
        root.style.setProperty('--loader-animation-duration', themeSettings.loaderAnimationDuration || '1s');
        root.style.setProperty('--loader-fade-out-duration', themeSettings.loaderFadeOutDuration || '0.5s');
        
        console.log('Theme settings applied from database:', themeSettings);
        </text>
    }
});
</script>