@{
    var contentSettings = ViewBag.ContentSettings as List<MyWebProfile.Models.ContentSettings> ?? new List<MyWebProfile.Models.ContentSettings>();
    var projects = ViewBag.Projects as List<MyWebProfile.Models.Project> ?? new List<MyWebProfile.Models.Project>();
    var experiences = ViewBag.Experiences as List<MyWebProfile.Models.Experience> ?? new List<MyWebProfile.Models.Experience>();
    
    var heroName = contentSettings.FirstOrDefault(x => x.Key == "HeroName")?.Value ?? "Lê Hữu Dương";
    var heroLocation = contentSettings.FirstOrDefault(x => x.Key == "HeroLocation")?.Value ?? "San Francisco, CA";
    var heroTitle = contentSettings.FirstOrDefault(x => x.Key == "HeroTitle")?.Value ?? "Full Stack Developer & UI/UX Designer";
    var heroImage = contentSettings.FirstOrDefault(x => x.Key == "HeroImage")?.Value ?? "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=200";
    
    // Tính toán động từ database - đồng bộ với phần About
    var heroProjects = projects.Count.ToString();
    
    // Tính số năm kinh nghiệm - ưu tiên năm nhỏ nhất từ kinh nghiệm làm việc
    DateTime startDate;
    var currentDate = DateTime.Now;
    
    // Ưu tiên 1: Lấy năm nhỏ nhất từ kinh nghiệm làm việc trong database
    if (experiences != null && experiences.Any())
    {
        var earliestExperience = experiences.OrderBy(e => e.StartDate).First();
        startDate = earliestExperience.StartDate;
    }
    // Ưu tiên 2: Sử dụng CareerStartDate từ ContentSettings
    else if (!string.IsNullOrEmpty(contentSettings.FirstOrDefault(x => x.Key == "CareerStartDate")?.Value))
    {
        var startDateText = contentSettings.FirstOrDefault(x => x.Key == "CareerStartDate")?.Value;
        if (DateTime.TryParse(startDateText, out var parsedDate))
        {
            startDate = parsedDate;
        }
        else
        {
            startDate = new DateTime(2019, 1, 1); // Fallback
        }
    }
    // Ưu tiên 3: Sử dụng CareerStartYear từ ContentSettings
    else
    {
        var startYearText = contentSettings.FirstOrDefault(x => x.Key == "CareerStartYear")?.Value ?? "2019";
        var startYear = int.TryParse(startYearText, out var year) ? year : 2019;
        startDate = new DateTime(startYear, 1, 1);
    }
    
    var experienceTimeSpan = currentDate - startDate;
    var experienceYears = experienceTimeSpan.Days / 365.25;
    var heroExperience = experienceYears > 0 ? $"{(int)experienceYears}+" : "1+";
    
    // Tính số khách hàng giống như phần About
    var baseClientsText = contentSettings.FirstOrDefault(x => x.Key == "BaseClients")?.Value ?? "30";
    var clientsPerYearText = contentSettings.FirstOrDefault(x => x.Key == "ClientsPerYear")?.Value ?? "5";
    
    var baseClients = int.TryParse(baseClientsText, out var baseClientsValue) ? baseClientsValue : 30;
    var clientsPerYear = int.TryParse(clientsPerYearText, out var clientsPerYearValue) ? clientsPerYearValue : 5;
    
    var additionalClients = (int)experienceYears * clientsPerYear;
    var totalClients = baseClients + additionalClients;
    var heroClients = $"{totalClients}+";
    
    var heroPortfolioButton = contentSettings.FirstOrDefault(x => x.Key == "HeroPortfolioButton")?.Value ?? "Xem Portfolio";
    var heroContactButton = contentSettings.FirstOrDefault(x => x.Key == "HeroContactButton")?.Value ?? "Liên hệ ngay";
}

<section id="hero" class="hero-modern">
    <!-- Background with animated gradient -->
    <div class="hero-bg">
        <div class="gradient-overlay"></div>
        <div class="floating-shapes">
            <div class="shape shape-1"></div>
            <div class="shape shape-2"></div>
            <div class="shape shape-3"></div>
        </div>
    </div>
    
    <div class="container">
        <div class="hero-content-modern">
            <!-- Left Column: Text Content -->
            <div class="hero-text-section" data-aos="fade-right" data-aos-duration="1000" data-aos-delay="200">
                <div class="hero-badge" data-aos="fade-down" data-aos-duration="800" data-aos-delay="300">
                    <i class="fas fa-code"></i>
                    <span>Developer & Designer</span>
                </div>
                
                <h1 class="hero-title-modern" data-aos="fade-up" data-aos-duration="800" data-aos-delay="400">
                    <span class="greeting">Xin chào, tôi là</span>
                    <span class="name">@heroName</span>
                </h1>
                
                <p class="hero-subtitle-modern" data-aos="fade-up" data-aos-duration="800" data-aos-delay="500">@heroTitle</p>
                
                <p class="hero-location-modern" data-aos="fade-up" data-aos-duration="800" data-aos-delay="600">
                    <i class="fas fa-map-marker-alt"></i>
                    @heroLocation
                </p>
                
                <div class="hero-stats-modern" data-aos="fade-up" data-aos-duration="800" data-aos-delay="700">
                    <div class="stat-item" title="Từ database: @projects.Count dự án">
                        <div class="stat-number">@heroProjects</div>
                        <div class="stat-label">Dự án hoàn thành</div>
                    </div>
                                         <div class="stat-item" title="@(experiences != null && experiences.Any() ? $"Từ kinh nghiệm làm việc: {startDate.ToString("yyyy")}" : $"Từ cấu hình: {startDate.ToString("yyyy")}") đến hiện tại">
                        <div class="stat-number">@heroExperience</div>
                        <div class="stat-label">Năm kinh nghiệm</div>
                    </div>
                    <div class="stat-item" title="Cơ bản: @baseClients + (@((int)experienceYears) năm × @clientsPerYear/năm) = @totalClients">
                        <div class="stat-number">@heroClients</div>
                        <div class="stat-label">Khách hàng hài lòng</div>
                    </div>
                </div>
                
                <div class="hero-actions" data-aos="fade-up" data-aos-duration="800" data-aos-delay="800">
                    @{
                        var displayConfig = ViewBag.DisplayConfig as Dictionary<string, object> ?? new Dictionary<string, object>();
                        var projectsActive = displayConfig.ContainsKey("ProjectsActive") ? (bool)displayConfig["ProjectsActive"] : true;
                        var contactActive = displayConfig.ContainsKey("ContactActive") ? (bool)displayConfig["ContactActive"] : true;
                    }
                    
                    @if (projectsActive)
                    {
                        <a href="#projects" class="btn btn-primary-modern">
                            <i class="fas fa-folder-open"></i>
                            @heroPortfolioButton
                        </a>
                    }
                    @if (contactActive)
                    {
                        <a href="#contact" class="btn btn-outline-modern">
                            <i class="fas fa-envelope"></i>
                            @heroContactButton
                        </a>
                    }
                </div>
                
                <div class="hero-social">
                    <a href="#" class="social-link" title="GitHub">
                        <i class="fab fa-github"></i>
                    </a>
                    <a href="#" class="social-link" title="LinkedIn">
                        <i class="fab fa-linkedin"></i>
                    </a>
                    <a href="#" class="social-link" title="Twitter">
                        <i class="fab fa-twitter"></i>
                    </a>
                    <a href="#" class="social-link" title="Instagram">
                        <i class="fab fa-instagram"></i>
                    </a>
                </div>
            </div>
            
            <!-- Right Column: Image -->
            <div class="hero-image-section">
                <div class="image-container">
                    <div class="image-frame">
                        <img src="@heroImage" alt="@heroName" class="hero-image-modern">
                    </div>
                    <div class="image-decoration">
                        <div class="decoration-circle"></div>
                        <div class="decoration-square"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Scroll indicator -->
    <div class="scroll-indicator">
        <div class="scroll-text">Cuộn xuống</div>
        <div class="scroll-arrow">
            <i class="fas fa-chevron-down"></i>
        </div>
    </div>
</section>

<style>
.hero-modern {
    position: relative;
    min-height: 100vh;
    display: flex;
    align-items: center;
    overflow: hidden;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.hero-bg {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 1;
}

.gradient-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, rgba(102, 126, 234, 0.9) 0%, rgba(118, 75, 162, 0.9) 100%);
}

.floating-shapes {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
}

.shape {
    position: absolute;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.1);
    animation: float 6s ease-in-out infinite;
}

.shape-1 {
    width: 100px;
    height: 100px;
    top: 20%;
    left: 10%;
    animation-delay: 0s;
}

.shape-2 {
    width: 150px;
    height: 150px;
    top: 60%;
    right: 15%;
    animation-delay: 2s;
}

.shape-3 {
    width: 80px;
    height: 80px;
    bottom: 20%;
    left: 20%;
    animation-delay: 4s;
}

@@keyframes float {
    0%, 100% { transform: translateY(0px) rotate(0deg); }
    50% { transform: translateY(-20px) rotate(180deg); }
}

.hero-content-modern {
    position: relative;
    z-index: 2;
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 4rem;
    align-items: center;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
}

.hero-text-section {
    color: white;
}

.hero-badge {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    background: rgba(255, 255, 255, 0.2);
    padding: 0.5rem 1rem;
    border-radius: 25px;
    font-size: 0.9rem;
    margin-bottom: 2rem;
    backdrop-filter: blur(10px);
}

.hero-title-modern {
    font-size: 3.5rem;
    font-weight: 700;
    line-height: 1.2;
    margin-bottom: 1rem;
}

.greeting {
    display: block;
    font-size: 1.2rem;
    font-weight: 400;
    opacity: 0.9;
    margin-bottom: 0.5rem;
}

.name {
    display: block;
    background: linear-gradient(45deg, #fff, #f0f0f0);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
}

.hero-subtitle-modern {
    font-size: 1.3rem;
    margin-bottom: 1rem;
    opacity: 0.9;
}

.hero-location-modern {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 1rem;
    opacity: 0.8;
    margin-bottom: 2rem;
}

.hero-stats-modern {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 2rem;
    margin-bottom: 2rem;
    color: #ffffff !important;
}

.hero-stats-modern .stat-item {
    text-align: center;
    padding: 1rem;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 15px;
    backdrop-filter: blur(10px);
    transition: transform 0.3s ease;
    color: #ffffff !important;
}

.hero-stats-modern .stat-item:hover {
    transform: translateY(-5px);
}

.hero-stats-modern .stat-number {
    font-size: 2rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
    color: #ffffff !important;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.hero-stats-modern .stat-label {
    font-size: 0.9rem;
    opacity: 0.9;
    color: #ffffff !important;
    font-weight: 500;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
}

.hero-actions {
    display: flex;
    gap: 1rem;
    margin-bottom: 2rem;
}

.btn-primary-modern {
    background: linear-gradient(45deg, #ff6b6b, #ee5a24);
    border: none;
    color: white;
    padding: 1rem 2rem;
    border-radius: 50px;
    font-weight: 600;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(255, 107, 107, 0.3);
}

.btn-primary-modern:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(255, 107, 107, 0.4);
    color: white;
}

.btn-outline-modern {
    background: transparent;
    border: 2px solid rgba(255, 255, 255, 0.3);
    color: white;
    padding: 1rem 2rem;
    border-radius: 50px;
    font-weight: 600;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
}

.btn-outline-modern:hover {
    background: rgba(255, 255, 255, 0.1);
    border-color: rgba(255, 255, 255, 0.5);
    color: white;
    transform: translateY(-2px);
}

.hero-social {
    display: flex;
    gap: 1rem;
}

.social-link {
    width: 45px;
    height: 45px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    text-decoration: none;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
}

.social-link:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: translateY(-3px);
    color: white;
}

.hero-image-section {
    display: flex;
    justify-content: center;
    align-items: center;
}

.image-container {
    position: relative;
}

.image-frame {
    width: 400px;
    height: 500px;
    border-radius: 30px;
    overflow: hidden;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
    position: relative;
    background: linear-gradient(45deg, #667eea, #764ba2);
}

.hero-image-modern {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
}

.image-frame:hover .hero-image-modern {
    transform: scale(1.05);
}

.image-decoration {
    position: absolute;
    top: -20px;
    right: -20px;
    z-index: -1;
}

.decoration-circle {
    width: 100px;
    height: 100px;
    border: 3px solid rgba(255, 255, 255, 0.2);
    border-radius: 50%;
    position: absolute;
    top: 0;
    right: 0;
}

.decoration-square {
    width: 60px;
    height: 60px;
    background: linear-gradient(45deg, #ff6b6b, #ee5a24);
    border-radius: 15px;
    position: absolute;
    bottom: -30px;
    left: -30px;
    animation: rotate 10s linear infinite;
}

@@keyframes rotate {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
}

.scroll-indicator {
    position: absolute;
    bottom: 2rem;
    left: 50%;
    transform: translateX(-50%);
    color: white;
    text-align: center;
    z-index: 2;
}

.scroll-text {
    font-size: 0.9rem;
    opacity: 0.8;
    margin-bottom: 0.5rem;
}

.scroll-arrow {
    animation: bounce 2s infinite;
}

@@keyframes bounce {
    0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
    40% { transform: translateY(-10px); }
    60% { transform: translateY(-5px); }
}

/* Responsive Design */
@@media (max-width: 768px) {
    .hero-content-modern {
        grid-template-columns: 1fr;
        gap: 2rem;
        text-align: center;
    }
    
    .hero-title-modern {
        font-size: 2.5rem;
    }
    
    .hero-stats-modern {
        grid-template-columns: 1fr;
        gap: 1rem;
    }
    
    .hero-actions {
        flex-direction: column;
        align-items: center;
    }
    
    .image-frame {
        width: 300px;
        height: 400px;
    }
    
    .hero-social {
        justify-content: center;
    }
}

@@media (max-width: 480px) {
    .hero-title-modern {
        font-size: 2rem;
    }
    
    .image-frame {
        width: 250px;
        height: 350px;
    }
}
</style> 